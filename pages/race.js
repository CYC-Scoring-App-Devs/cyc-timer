import React, { useEffect, useState } from "react";
import Link from "next/link";
import axios from "axios";
import Head from "next/head";
import styles from "../styles/Home.module.css";

const Race = () => {
  const [currentTime, setCurrentTime] = useState(new Date());
  const [editing, setEditing] = useState(false);
  const [startTime, setStartTime] = useState(null);
  const [startTimeString, setStartTimeString] = useState(
    "Click below to Mark Start Time"
  );
  const [boatsListState, setBoatsListState] = useState();
  const [sortedByRating, setSortedByRating] = useState();

  const handleStartTime = () => {
    const date = new Date();
    setStartTime(date);
    setStartTimeString(date.toLocaleTimeString());
  };

  const editStartTime = () => {
    setEditing(true);
  };

  const handleFinishTime = (e) => {
    const finishTime = new Date();

    const updatedBoatsList = boatsListState.map((boat) => {
      if (boat.id === e.target.id) {
        return {
          ...boat,
          finishTime: finishTime.toLocaleTimeString(),
        };
      } else {
        return boat;
      }
    });
    setBoatsListState(updatedBoatsList);
  };

  const handleReset = () => {
    setStartTime(null);
    setStartTimeString("Click below to Mark Start Time");
    setBoatsListState( boatsListState.map((boat) => {
      return {
        ...boat,
        finishTime: null,
      };
    }));
  };

  const handleNewBoat = (e) => {
    const name = document.getElementById("newBoatName").value;
    if (name === "") {
      document.getElementById("my-drawer").checked = false;
      return;
    }

    axios.post("/api/new-boat", { name }).then((res) => {
      setBoatsListState([
        ...boatsListState,
        {
          id: res.data.id,
          name: name,
          competing: true,
          finishTime: null,
          rating: null,
        },
      ]);
    });
    document.getElementById("newBoatName").value = "";
    document.getElementById("my-drawer").checked = false;
  };

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  useEffect(() => {
    const date = new Date();
    setStartTime(date.setHours(18, 35, 0));
  }, []);

  useEffect(() => {
    axios.get("/api/boat-list").then((res) => {
      setBoatsListState(
        res.data.sort((a, b) => {
          if (a.name < b.name) {
            return -1;
          }
          if (a.name > b.name) {
            return 1;
          }
          return 0;
        })
      );
    });
  }, []);

  useEffect(() => {
    if (boatsListState) {
      const sorted = [...boatsListState];
      sorted.sort((a, b) => {
        if (a.rating < b.rating) {
          return -1;
        }
        if (a.rating > b.rating) {
          return 1;
        }
        return 0;
      }
      );
      setSortedByRating(sorted);
    }
  }, [boatsListState, setSortedByRating]);


  return (
    <div className={styles.container}>
      <Head>
        <title>CYC Race Timer</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="drawer">
        <input id="my-drawer" type="checkbox" className="drawer-toggle" />
        <div className="drawer-content">
          <div className="border text-center w-full">
            <div className="pt-2 text-center">
              <h2 className="pt-2">Current Time:</h2>
              <h3 className="text-yellow-500 text-xl">
                {currentTime.toLocaleTimeString()}
              </h3>
            </div>
            <div className="pt-2 text-center">
              <h2 className="pt-2">Race Start Time:</h2>
              <h3
                className="pb-2 text-green-400 text-xl"
                onDoubleClick={editStartTime}
              >
                {startTimeString}
              </h3>
              {editing && (
                <div className="pt-2 text-center">
                  <h2 className="pt-2">New Start Time:</h2>
                  <input
                    type="time-local"
                    className="border border-green-600"
                    
                    id="newStartTime"
                    onChange={(e) => {
                      const date = e.target.value;
                
                      setStartTimeString(date);
                    }
                    }
                    defaultValue={startTimeString}
                  />
                  <button
                    className="btn btn-secondary bg-green-400 border-green-600 mb-4"
                    onClick={() => {
                      setEditing(false);
                    }}
                  >
                    Save
                  </button>
                </div>
              )}
              {startTimeString === "Click below to Mark Start Time" || startTimeString === "Invalid Date" ? (
                <button
                  className="btn btn-secondary bg-green-400 border-green-600 mb-4"
                  onClick={handleStartTime}
                >
                  Mark Start Time
                </button>
              ) : (
                 !editing && (
                <button
                  className="btn btn-secondary bg-yellow-400 border-yellow-500 mb-4"
                  onClick={editStartTime}
                >
                  Edit Start Time
                </button>
              )
              )}
            </div>

            <label htmlFor="my-drawer" className="btn btn-error drawer-button ">
              Add Boats to Race
            </label>
          </div>
          <div className="mt-4 w-full border min-h-16">
            <h2 className="text-lg">Competing Boats:</h2>

            {sortedByRating?.map((boat, index) => {
              if (boat.competing) {
                return (
                  <div className="flex md:flex-row w-full p-2" key={index}>
                    <div className="flex  flex-col md:flex-row justify-between w-full items-center border">
                      <h3 className="text-lg w-1/4">{boat.name}</h3>
                      {/* <h3 className="text-lg hidden md:block">Sail#: {""}</h3> */}
                      <h3 className="text-lg hidden md:block md:w-1/4">Rating: {boat.rating}</h3>
                      <p className="text-green-400 md:w-1/4">
                        Finish time: {boat.finishTime}
                      </p>
                      <button
                        className="btn btn-sm md:btn-md btn-error bg-red-400 border-red-600"
                        id={boat.id}
                        onClick={handleFinishTime}
                      >
                        Mark Finish Time
                      </button>
                    </div>
                  </div>
                );
              }
            })}
          </div>
          <button className="btn btn-error mt-8" onClick={handleReset}>reset</button>
        </div>

      {/* sidebar */}
        <div className="drawer-side">
          <label htmlFor="my-drawer" className="drawer-overlay"></label>
          <ul className="p-4 overflow-y-auto w-80 bg-base-100 text-base-content">
            {boatsListState?.map((boat, index) => (
              <div key={index} className="flex flex-row w-full">
                <li className="border-b py-4 w-full">
                  <label htmlFor={`checkbox-${index}`} className="">
                    {boat.name}:{" "}
                  </label>
                  <input
                    type="checkbox"
                    className="checkbox checkbox-lg mx-8 p-4 bg-green-300 checkbox-primary"
                    id={`${index}`}
                    checked={boat.competing}
                    onChange={(e) => {
                      setBoatsListState(
                        boatsListState.map((boat, index) =>
                          index === Number(e.target.id)
                            ? { ...boat, competing: !boat.competing }
                            : boat
                        )
                      );
                    }}
                  />
                </li>
              </div>
            ))}
            <label htmlFor="newBoat" className="">
              Add New Boat:
            </label>
            <input
              type="text"
              id="newBoatName"
              className="p-4 border rounded"
              
              onKeyDown={(e) => {
                if (e.key === "Enter") {
                  handleNewBoat();
                }
              }}
            />
            <button
              className="btn btn-secondary bg-green-400 border-green-900 my-4"
              onClick={handleNewBoat}
              onTouchEnd={handleNewBoat}
            >
              Add to Race
            </button>
            <div className="mt-64">
            <button className="btn btn-error  mb-4" onClick={handleNewBoat}>
            <Link href="/admin">edit boat list</Link>
            </button>
          </div>
          </ul>
        </div>

      </div>
    </div>
  );
};

export default Race;
